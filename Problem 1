AIM: Write a program to sort a list of Employee objects (name, age, salary) using lambda expressions.
CODE: import java.util.*;

public class Main {

    // Employee class
    static class Employee {
        private String name;
        private int age;
        private double salary;

        // Constructor
        public Employee(String name, int age, double salary) {
            this.name = name;
            this.age = age;
            this.salary = salary;
        }

        // Getters
        public String getName() {
            return name;
        }

        public int getAge() {
            return age;
        }

        public double getSalary() {
            return salary;
        }

        // toString method for displaying Employee information
        @Override
        public String toString() {
            return "Employee{name='" + name + "', age=" + age + ", salary=" + salary + '}';
        }
    }

    public static void main(String[] args) {
        // Creating a list of Employee objects with custom names
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Paras", 30, 70000));    // Example: Paras
        employees.add(new Employee("Akash", 25, 80000));    // Example: Akash
        employees.add(new Employee("Shyam", 28, 65000));    // Example: Shyam
        employees.add(new Employee("Rashad", 35, 75000));   // Example: Rashad
        employees.add(new Employee("Aditya", 22, 90000));   // Example: Aditya

        // Sorting by name using lambda expression
        System.out.println("Sorted by Name:");
        employees.sort((e1, e2) -> e1.getName().compareTo(e2.getName()));
        employees.forEach(System.out::println);

        // Sorting by age using lambda expression
        System.out.println("\nSorted by Age:");
        employees.sort((e1, e2) -> Integer.compare(e1.getAge(), e2.getAge()));
        employees.forEach(System.out::println);

        // Sorting by salary using lambda expression
        System.out.println("\nSorted by Salary:");
        employees.sort((e1, e2) -> Double.compare(e1.getSalary(), e2.getSalary()));
        employees.forEach(System.out::println);
    }
}

OUTPUT: 
 Sorted by Name:
Employee{name='Aditya', age=22, salary=90000.0}
Employee{name='Akash', age=25, salary=80000.0}
Employee{name='Paras', age=30, salary=70000.0}
Employee{name='Rashad', age=35, salary=75000.0}
Employee{name='Shyam', age=28, salary=65000.0}

Sorted by Age:
Employee{name='Aditya', age=22, salary=90000.0}
Employee{name='Akash', age=25, salary=80000.0}
Employee{name='Shyam', age=28, salary=65000.0}
Employee{name='Paras', age=30, salary=70000.0}
Employee{name='Rashad', age=35, salary=75000.0}

Sorted by Salary:
Employee{name='Shyam', age=28, salary=65000.0}
Employee{name='Paras', age=30, salary=70000.0}
Employee{name='Rashad', age=35, salary=75000.0}
Employee{name='Akash', age=25, salary=80000.0}
Employee{name='Aditya', age=22, salary=90000.0}
